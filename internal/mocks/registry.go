// Copyright 2022 Criticality Score Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	projectrepo "github.com/ossf/criticality_score/internal/collector/projectrepo"
	signal "github.com/ossf/criticality_score/internal/collector/signal"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// EmptySet mocks base method.
func (m *MockSource) EmptySet() signal.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptySet")
	ret0, _ := ret[0].(signal.Set)
	return ret0
}

// EmptySet indicates an expected call of EmptySet.
func (mr *MockSourceMockRecorder) EmptySet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptySet", reflect.TypeOf((*MockSource)(nil).EmptySet))
}

// Get mocks base method.
func (m *MockSource) Get(ctx context.Context, r projectrepo.Repo, jobID string) (signal.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, r, jobID)
	ret0, _ := ret[0].(signal.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSourceMockRecorder) Get(ctx, r, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSource)(nil).Get), ctx, r, jobID)
}

// IsSupported mocks base method.
func (m *MockSource) IsSupported(arg0 projectrepo.Repo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupported", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSupported indicates an expected call of IsSupported.
func (mr *MockSourceMockRecorder) IsSupported(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupported", reflect.TypeOf((*MockSource)(nil).IsSupported), arg0)
}
